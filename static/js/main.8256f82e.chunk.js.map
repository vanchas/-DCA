{"version":3,"sources":["components/main/TotalInfo.jsx","components/main/ItemOfListTransaction.jsx","components/main/Chart.jsx","components/main/Expenses.jsx","components/main/Income.jsx","components/main/Main.jsx","containers/WalletContainer.jsx","store/actions.js","__tests__/validator.js","store/expenseReducer.js","store/incomeReducer.js","store/rootReducer.js","store/localStorage.js","components/header/Header.jsx","components/app/App.js","serviceWorker.js","index.js"],"names":["TotalInfo","updateBalanceColor","Math","sign","props","incomesTotalSum","expensesTotalSum","className","role","style","color","this","Component","ItemOfListTransaction","transaction","sum","date","comment","Chart","bars","sumsOfTypesInPercents","map","item","i","key","width","isNaN","Expenses","expensesSumInput","input","setState","expenseSum","value","expensesCommentInput","expenseComment","expensesTypeInput","expenseType","onExpenseAdding","setNewExpense","state","selectedOption","setSelectOption","updateList","exType","expenses","exp","type","storage","e","random","chartValuesCounter","initialSumsOfTypes","types","amount","absoluteMaxNum","reduce","a","b","round","updateTypeAmount","arrOfTypeSums","push","tp","options","label","onChange","target","placeholder","defaultValue","onClick","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","Info","incomeSumInput","incomeSum","incomeCommentInput","incomeComment","onIncomeAdding","setNewIncome","moment","format","filterValue","length","newIncomes","incomes","filter","inc","toLowerCase","search","setFilterValue","title","Main","WalletContainer","mapDispatchToProps","payload","connect","expenseReducer","incomeReducer","valueValidator","string","toString","trim","console","error","initialState","sumNum","num","action","concat","alert","Object","assign","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","React","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8256f82e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './main.scss';\r\n\r\nexport default class TotalInfo extends Component {\r\n  \r\n  updateBalanceColor = () => {\r\n      return (Math.sign(this.props.incomesTotalSum - this.props.expensesTotalSum) <= -1) ? 'red' : 'green';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wallet_info_block font-weight-bold\">\r\n        <div className=\"balance alert alert-dark\" role=\"alert\">\r\n          Total balance: &nbsp;\r\n          <span style={{color: this.updateBalanceColor()}}>{this.props.incomesTotalSum - this.props.expensesTotalSum}</span>\r\n        </div>\r\n        <div className=\"month_expenses alert alert-dark text-dark\">\r\n          Total expenses: &nbsp;\r\n          <span>{this.props.expensesTotalSum}</span>\r\n        </div>\r\n        <div className=\"month_income alert alert-dark text-dark\">\r\n          Total income: &nbsp;\r\n          <span>{this.props.incomesTotalSum}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ItemOfListTransaction extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"text-secondary border-bottom\">\r\n        <b>{this.props.transaction.sum}</b> -\r\n        <small><i> {this.props.transaction.date}</i></small><br />\r\n        <small>{this.props.transaction.comment}</small>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const Chart = props => {\r\n  const data = props.sumsOfTypesInPercents;\r\n  const bars = data.map((item, i) =>\r\n    <div key={i}\r\n      className=\"bar\"\r\n      style={{ width: item + '%' }}\r\n    >\r\n      {(isNaN(item)) ? 0 : item} %\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      {bars}\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport './main.scss';\r\nimport Select from 'react-select';\r\nimport ItemOfListTransaction from \"./ItemOfListTransaction\";\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport { Chart } from './Chart.jsx';\r\n\r\nexport default class Expenses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.options = [\r\n      { value: 'food', label: 'Food' },\r\n      { value: 'study', label: 'Study' },\r\n      { value: 'fun', label: 'Fun' },\r\n      { value: 'medicine', label: 'Medicine' },\r\n      { value: 'daily', label: 'Daily' }\r\n    ];\r\n    this.types = [\r\n      { type: 'food', amount: 0 },\r\n      { type: 'study', amount: 0 },\r\n      { type: 'fun', amount: 0 },\r\n      { type: 'medicine', amount: 0 },\r\n      { type: 'daily', amount: 0 }\r\n    ];\r\n    this.state = {\r\n      expenseSum: '',\r\n      expenseComment: '',\r\n      expenseType: '',\r\n      selectedOption: { value: 'food', label: 'Food' }\r\n    };\r\n  }\r\n\r\n  expensesSumInput = input => {\r\n    this.setState({\r\n      expenseSum: input.value\r\n    });\r\n  }\r\n\r\n  expensesCommentInput = input => {\r\n    this.setState({\r\n      expenseComment: input.value\r\n    });\r\n  }\r\n\r\n  expensesTypeInput = input => {\r\n    this.setState({\r\n      expenseType: input.value\r\n    });\r\n  }\r\n\r\n  onExpenseAdding = () => {\r\n    this.props.setNewExpense(\r\n      this.state.expenseSum,\r\n      this.state.expenseComment,\r\n      this.state.selectedOption.value\r\n    );\r\n    // this.types.map(t => {\r\n    //   if (t.type === this.state.selectedOption.value) {\r\n    //     t.amount += +this.state.expenseSum;\r\n    //   }\r\n    // });\r\n    this.setState({\r\n      expenseSum: '',\r\n      expenseComment: '',\r\n      expenseType: ''\r\n    });\r\n  }\r\n\r\n  setSelectOption = selectedOption => {\r\n    this.setState({ selectedOption });\r\n  }\r\n\r\n  updateList = exType => {\r\n    // this.props.expenses.map(exp => {\r\n    //   if (exp.type === exType) {\r\n    //     this.types.forEach(tp => {\r\n    //       exp.storage.map(e => {\r\n    //         if (tp.type === exType) {\r\n    //           return tp.amount += +e.sum;\r\n    //         }\r\n    //       })\r\n    //     })\r\n    //   }\r\n    // })\r\n\r\n    return this.props.expenses.map((exp) => {\r\n      if (exp.type === exType) {\r\n        return exp.storage.map(e => {\r\n          return <ItemOfListTransaction key={Math.random()} transaction={e} />\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  chartValuesCounter = () => {\r\n    const initialSumsOfTypes = [\r\n      +this.types[0].amount,\r\n      +this.types[1].amount,\r\n      +this.types[2].amount,\r\n      +this.types[3].amount,\r\n      +this.types[4].amount\r\n    ];\r\n\r\n    const absoluteMaxNum = initialSumsOfTypes.reduce((a, b) => a + b);\r\n\r\n    const [first, second, third, fourth, fifth] = [\r\n      Math.round(initialSumsOfTypes[0] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[1] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[2] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[3] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[4] / absoluteMaxNum * 100)\r\n    ];\r\n\r\n    const sumsOfTypesInPercents = [first, second, third, fourth, fifth];\r\n\r\n    return sumsOfTypesInPercents;\r\n  }\r\n\r\n  updateTypeAmount = exType => {\r\n    let arrOfTypeSums = [];\r\n    this.props.expenses.map(exp => {\r\n      if (exp.type === exType) {\r\n        return exp.storage.map(e => {\r\n          return arrOfTypeSums.push(+e.sum);\r\n        })\r\n      }\r\n    })\r\n    this.types.map(tp => {\r\n      if (tp.type === exType) {\r\n        return tp.amount = arrOfTypeSums.reduce((a, b) => +a + +b, 0);\r\n      }\r\n    })\r\n    return arrOfTypeSums.reduce((a, b) => a + b, 0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"expenses_block\">\r\n        <div className=\"label-exp-block\">Expenses\r\n        </div>\r\n        <div className=\"expenses_input\">\r\n          <input\r\n            className=\"expenses_sum_input form-control\"\r\n            value={this.state.expenseSum}\r\n            onChange={e => this.expensesSumInput(e.target)}\r\n            type=\"number\"\r\n            placeholder=\"expense sum$\" />\r\n          <Select\r\n            options={this.options}\r\n            onChange={this.setSelectOption}\r\n            defaultValue={this.state.selectedOption}\r\n          />\r\n          <input\r\n            onChange={e => this.expensesCommentInput(e.target)}\r\n            className=\"expenses_commnet_input form-control\"\r\n            type=\"text\"\r\n            value={this.state.expenseComment}\r\n            placeholder=\"commentary\"\r\n          />\r\n          <button className=\"add btn btn-secondary font-weight-bold\"\r\n            onClick={this.onExpenseAdding}>add</button>\r\n        </div>\r\n\r\n        <Accordion className=\"accordion\" defaultActiveKey=\"0\">\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\"\r\n                className=\"text-secondary font-weight-bold\">\r\n                Food: &nbsp;\r\n                {this.updateTypeAmount('food')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"0\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('food')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\"\r\n                className=\"text-secondary font-weight-bold\">\r\n                Study: &nbsp;\r\n                {this.updateTypeAmount('study')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"1\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('study')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\"\r\n                className=\"text-secondary font-weight-bold\">\r\n                Fun: &nbsp;\r\n                {this.updateTypeAmount('fun')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"2\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('fun')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\"\r\n                className=\"text-secondary font-weight-bold\">\r\n                Medicine: &nbsp;\r\n                {this.updateTypeAmount('medicine')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"3\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('medicine')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\"\r\n                className=\"text-secondary font-weight-bold\">\r\n                Daily: &nbsp;\r\n                {this.updateTypeAmount('daily')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"4\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('daily')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n\r\n        <Chart types={this.options} sumsOfTypesInPercents={this.chartValuesCounter()} />\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './main.scss';\r\nimport ItemOfListTransaction from './ItemOfListTransaction';\r\nimport moment from 'moment';\r\n\r\nexport default class Info extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      incomeSum: '',\r\n      incomeComment: '',\r\n      filterValue: ''\r\n    };\r\n  }\r\n\r\n  incomeSumInput = input => {\r\n    this.setState({\r\n      incomeSum: input.value\r\n    })\r\n  }\r\n\r\n  incomeCommentInput = input => {\r\n    this.setState({\r\n      incomeComment: input.value\r\n    })\r\n  }\r\n\r\n  onIncomeAdding = () => {\r\n    this.props.setNewIncome(\r\n      this.state.incomeSum,\r\n      this.state.incomeComment,\r\n      moment().format(\"MMM Do YY\")\r\n    );\r\n    this.setState({\r\n      incomeSum: '',\r\n      incomeComment: ''\r\n    })\r\n  }\r\n\r\n  updateList = () => {\r\n    if (!this.state.filterValue.length) {\r\n      return this.props.incomes.map(inc => {\r\n        return <ItemOfListTransaction key={Math.random()} transaction={inc} />\r\n      })\r\n    } else {\r\n      let newIncomes = this.props.incomes;\r\n      newIncomes = newIncomes.filter(inc => {\r\n        return inc.comment.toLowerCase().search(this.state.filterValue.toLowerCase()) !== -1;\r\n      });\r\n      return newIncomes.map(inc => {\r\n        return <ItemOfListTransaction key={Math.random()} transaction={inc} />\r\n      })\r\n    }\r\n  }\r\n\r\n  setFilterValue = (value) => {\r\n    this.setState({ filterValue: value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"income_block\">\r\n        <div className=\"label-inc-block\">Incomes</div>\r\n        <div className=\"income_input\">\r\n          <input\r\n            className=\"income_sum_input form-control\"\r\n            onChange={e => this.incomeSumInput(e.target)}\r\n            value={this.state.incomeSum}\r\n            type=\"number\"\r\n            placeholder=\"income sum$\"\r\n          />\r\n          <button className=\"btn-add-income btn btn-secondary font-weight-bold\"\r\n            onClick={this.onIncomeAdding}>\r\n            add\r\n          </button>\r\n          <input\r\n            className=\"income_comment form-control\"\r\n            type=\"text\"\r\n            onChange={e => this.incomeCommentInput(e.target)}\r\n            value={this.state.incomeComment}\r\n            placeholder=\"commentary\"\r\n          />\r\n          <input type=\"text\"\r\n            onChange={e => this.setFilterValue(e.target.value)}\r\n            title=\"filter by commentary\"\r\n            className=\"income_filter form-control\" placeholder=\"filter...\" />\r\n        </div>\r\n        <div className=\"income_list\">\r\n          {this.updateList()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './main.scss';\r\nimport TotalInfo from './TotalInfo';\r\nimport Expenses from './Expenses';\r\nimport Income from './Income';\r\n\r\nexport default class Main extends Component {\r\n  render() {\r\n    return (\r\n      <main className=\"main\">\r\n        <TotalInfo\r\n          incomesTotalSum={this.props.incomesTotalSum}\r\n          expensesTotalSum={this.props.expensesTotalSum}\r\n        />\r\n        <Expenses\r\n          expenses={this.props.expenses}\r\n          setNewExpense={this.props.setNewExpense}\r\n        />\r\n        <Income\r\n          incomes={this.props.incomes}\r\n          setNewIncome={this.props.setNewIncome}\r\n        />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Main from '../components/main/Main';\r\nimport { setNewExpense, setNewIncome } from '../store/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WalletContainer extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Main\r\n          incomes={this.props.incomes}\r\n          expenses={this.props.expenses}\r\n          incomesTotalSum={this.props.incomesTotalSum}\r\n          expensesTotalSum={this.props.expensesTotalSum}\r\n          setNewExpense={this.props.setNewExpense}\r\n          setNewIncome={this.props.setNewIncome}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    expenses: state.expenseReducer.expenses,\r\n    incomes: state.incomeReducer.incomes,\r\n    expensesTotalSum: state.expenseReducer.expensesTotalSum,\r\n    incomesTotalSum: state.incomeReducer.incomesTotalSum\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setNewExpense,\r\n  setNewIncome\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletContainer);","export const ADD_EXPENSE = 'ADD_EXPENSE';\r\nexport const ADD_INCOME = 'ADD_INCOME';\r\n\r\nexport const setNewExpense = (sum, comment, type) => {\r\n  return {\r\n    type: ADD_EXPENSE,\r\n    payload: {\r\n      sum,\r\n      comment,\r\n      type\r\n    }\r\n  }\r\n}\r\n\r\nexport const setNewIncome = (sum, comment, date) => {\r\n  return {\r\n    type: ADD_INCOME,\r\n    payload: {\r\n      sum,\r\n      comment,\r\n      date\r\n    }\r\n  }\r\n}","export const valueValidator = (string) => {\r\n  if (string && string.toString().trim().length && Math.sign(+string) > 0) {\r\n    return string;\r\n  } else {\r\n    console.error('Enter correct value');\r\n  }\r\n}","import { ADD_EXPENSE } from './actions';\r\nimport { valueValidator } from '../__tests__/validator';\r\nimport moment from 'moment';\r\n\r\nconst initialState = {\r\n  expenses: [\r\n    { type: 'food', storage: [] },\r\n    { type: 'fun', storage: [] },\r\n    { type: 'medicine', storage: [] },\r\n    { type: 'daily', storage: [] },\r\n    { type: 'study', storage: [] }\r\n  ],\r\n  expensesTotalSum: 0\r\n}\r\nlet sumNum = 0;\r\n\r\nfunction sum(num) {\r\n  return sumNum += +num;\r\n}\r\n\r\nexport const expenseReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case ADD_EXPENSE:\r\n      if (valueValidator(action.payload.sum)) {\r\n        return {\r\n          ...state,\r\n          expensesTotalSum: sum(action.payload.sum),\r\n          expenses: state.expenses.map(exp => {\r\n            if (exp.type !== action.payload.type) {\r\n              return exp;\r\n            }\r\n            return {\r\n              ...exp,\r\n              storage: exp.storage.concat({\r\n                sum: action.payload.sum,\r\n                comment: action.payload.comment,\r\n                type: action.payload.type,\r\n                date: moment().format(\"MMM Do YY\")\r\n              })\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        alert('Enter correct value. It must be a number');\r\n      }\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default expenseReducer;","import { ADD_INCOME } from './actions';\r\nimport { valueValidator } from '../__tests__/validator';\r\n\r\nconst initialState = {\r\n  incomes: [],\r\n  incomesTotalSum: 0\r\n}\r\n\r\nlet sumNum = 0;\r\n\r\nfunction sum(num) {\r\n  return sumNum += +num;\r\n}\r\n\r\nconst incomeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case ADD_INCOME:\r\n      if (valueValidator(action.payload.sum)) {\r\n        return Object.assign({}, state, {\r\n          incomes: state.incomes.concat(action.payload),\r\n          incomesTotalSum: sum(action.payload.sum)\r\n        })\r\n      } else {\r\n        alert('Enter correct value. It must be a number');\r\n      }\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default incomeReducer;","import { combineReducers, createStore } from 'redux';\r\nimport expenseReducer from './expenseReducer';\r\nimport incomeReducer from './incomeReducer';\r\nimport { loadState, saveState } from './localStorage';\r\n\r\nexport const rootReducer = combineReducers({\r\n  expenseReducer,\r\n  incomeReducer\r\n})\r\n\r\nconst persistedState = loadState();\r\nexport const store = createStore(\r\n  rootReducer, \r\n  persistedState\r\n);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n})","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (serializedState === null) return undefined;\r\n    return JSON.parse(serializedState);\r\n  } catch (e) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveState = state => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (e) {\r\n    // \r\n  }\r\n}","import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1 className=\"h3 pt-3 mb-0 text-center text-secondary\">\r\n          <span className=\"font-weight-bold\">D</span>aily \r\n          <span className=\"font-weight-bold\"> C</span>ash \r\n          <span className=\"font-weight-bold\"> A</span>ccounting\r\n          </h1>\r\n      </header>\r\n    )\r\n  }\r\n}","import './App.css';\nimport React from 'react';\nimport WalletContainer from '../../containers/WalletContainer';\nimport { Provider } from 'react-redux';\nimport { store } from '../../store/rootReducer';\nimport Header from '../header/Header';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App bg-light h-100\">\n          <Header />\n          <WalletContainer state={store.getState()} />\n        </div>\n      </Provider>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}