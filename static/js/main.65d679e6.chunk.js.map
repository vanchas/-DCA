{"version":3,"sources":["components/main/TotalInfo.jsx","components/header/Header.jsx","components/footer/Footer.jsx","service/ExpensesService.js","components/main/Chart.jsx","components/main/ItemOfListTransaction.jsx","components/main/Expenses.jsx","service/IncomesService.js","components/main/Income.jsx","components/app/App.js","components/main/Main.jsx","serviceWorker.js","index.js"],"names":["TotalInfo","React","Component","updateBalanceColor","Math","sign","props","incomesTotalSum","expensesTotalSum","className","role","style","color","this","moment","require","ExpensesService","fetch","apiPath","then","response","json","catch","error","console","log","sum","comment","type","method","body","JSON","stringify","date","format","headers","Chart","types","bars","sumsOfTypesInPercents","map","item","i","key","width","ind","label","isNaN","ItemOfListTransaction","transaction","month","Expenses","onExpenseSumInput","value","setState","newExpenseSum","onExpenseCommentInput","newExpenseComment","onAddingExpenseClick","state","length","createExpense","selectedOption","requestAllExpenses","alert","setSelectOption","updateList","exType","expenses","exp","storage","e","random","chartValuesCounter","initialSumsOfTypes","amount","absoluteMaxNum","reduce","a","b","round","updateTypeAmount","arrOfTypeSums","push","tp","options","bind","placeholder","onChange","target","defaultValue","onClick","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","IncomesService","Incomes","onIncomeCommentInput","newIncomeComment","onIncomeSumInput","newIncomeSum","onAddingIncomeClick","createIncome","requestAllIncomes","incomes","filterValue","newIncomes","filter","inc","toLowerCase","search","setFilterValue","title","App","findAllExpenses","expensesData","expensesSum","findAllIncomes","incomesData","incomesSum","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65d679e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './main.scss';\r\n\r\nexport default class TotalInfo extends Component {\r\n  updateBalanceColor = () => {\r\n    return (Math.sign(this.props.incomesTotalSum - this.props.expensesTotalSum) <= -1) ? '#7b0000' : '#216f21';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wallet_info_block font-weight-bold\">\r\n        <div className=\"balance alert alert-dark\" role=\"alert\">\r\n          Total balance: &nbsp;\r\n          <span\r\n            style={{\r\n              color: `${this.updateBalanceColor()}`\r\n            }}\r\n          >\r\n            {this.props.incomesTotalSum - this.props.expensesTotalSum}\r\n          </span>\r\n        </div>\r\n        <div className=\"month_expenses alert alert-dark text-dark\">\r\n          Total expenses: &nbsp;\r\n          <span>{this.props.expensesTotalSum}</span>\r\n        </div>\r\n        <div className=\"month_income alert alert-dark text-dark\">\r\n          Total incomes: &nbsp;\r\n          <span>{this.props.incomesTotalSum}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './header.module.scss';\r\n\r\nexport default class Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1 className=\"h2 pt-3 mb-0 text-center text-secondary\">\r\n          <span className=\"font-weight-bold\">D</span>aily \r\n          <span className=\"font-weight-bold\"> C</span>ash \r\n          <span className=\"font-weight-bold\"> A</span>ccounting\r\n          </h1>\r\n      </header>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"page-footer font-small blue\">\r\n        <div className=\"h6 footer-copyright text-dark text-center pt-1 pb-3\">\r\n          © 2020 Copyright:\r\n          <a className=\"text-secondary\" href=\"https://github.com/vanchas\"> &nbsp;\r\n          github.com/vanchas\r\n          </a>\r\n        </div>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","const moment = require('moment');\r\n\r\nexport default class ExpensesService {\r\n  static apiPath = '/api/v1/expenses'\r\n\r\n  static findAllExpenses() {\r\n    return fetch(ExpensesService.apiPath)\r\n      .then(response => response.json())\r\n      .catch(error => {\r\n        console.log('error', error);\r\n        return [];\r\n      })\r\n  }\r\n\r\n  static createExpense(sum, comment, type) {\r\n    return fetch(`${ExpensesService.apiPath}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        sum,\r\n        comment,\r\n        type,\r\n        date: moment().format('MMMM Do YYYY')\r\n      }),\r\n      headers: {\"Content-Type\": \"application/json\"}\r\n    });\r\n  }\r\n}","import React from 'react';\r\n\r\nexport const Chart = props => {\r\n  const types = props.types;\r\n  const data = props.sumsOfTypesInPercents;\r\n  const bars = data.map((item, i) =>\r\n    <div key={i}\r\n      className=\"bar\"\r\n      style={{ width: item + '%' }}\r\n    >\r\n      <span className=\"title\">{types.map((type, ind) => (i === ind) ? type.label : '' )} </span>\r\n      &nbsp; &nbsp;\r\n      <span className=\"percent\"> {(isNaN(item)) ? '' : `${item} %`}</span>\r\n    </div>\r\n  );\r\n  \r\n  return (\r\n    <div className=\"chart\">\r\n      {bars}\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class ItemOfListTransaction extends Component {\r\n  render() {\r\n    const transaction = this.props.transaction;\r\n    return (\r\n      <div \r\n      className={`${\r\n        (+transaction.month % 2 === 0) \r\n        ? 'transaction-even'\r\n        : 'transaction-odd'\r\n      } transaction-item text-secondary border-bottom`}>\r\n        <b>{transaction.sum}</b> -\r\n        <small> {transaction.date}</small><br />\r\n        <span>{transaction.comment}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ExpensesService from '../../service/ExpensesService';\r\nimport Select from 'react-select';\r\nimport './main.scss';\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport { Chart } from './Chart';\r\nimport ItemOfListTransaction from './ItemOfListTransaction';\r\n\r\nexport default class Expenses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.options = [\r\n      { value: 'food', label: 'Food' },\r\n      { value: 'study', label: 'Study' },\r\n      { value: 'fun', label: 'Fun' },\r\n      { value: 'medicine', label: 'Medicine' },\r\n      { value: 'daily', label: 'Daily' }\r\n    ];\r\n    this.types = [\r\n      { type: 'food', amount: 0 },\r\n      { type: 'study', amount: 0 },\r\n      { type: 'fun', amount: 0 },\r\n      { type: 'medicine', amount: 0 },\r\n      { type: 'daily', amount: 0 }\r\n    ];\r\n    this.state = {\r\n      newExpenseComment: '',\r\n      newExpenseSum: '',\r\n      selectedOption: { value: 'food', label: 'Food' }\r\n    }\r\n    this.onAddingExpenseClick = this.onAddingExpenseClick.bind(this);\r\n  }\r\n\r\n  onExpenseSumInput = value => {\r\n    this.setState({ newExpenseSum: value })\r\n  }\r\n\r\n  onExpenseCommentInput = value => {\r\n    this.setState({ newExpenseComment: value })\r\n  }\r\n\r\n  onAddingExpenseClick = () => {\r\n    if (!this.state.newExpenseSum.length) {\r\n      console.error('Input with sum must be a number and cannot be empty!');\r\n      alert('Enter correct value of sum. It must be a number and cannot be empty');\r\n    } else {\r\n      ExpensesService\r\n        .createExpense(\r\n          this.state.newExpenseSum,\r\n          this.state.newExpenseComment,\r\n          this.state.selectedOption.value\r\n        )\r\n        .then(this.requestAllExpenses);\r\n      this.setState({\r\n        newExpenseComment: '',\r\n        newExpenseSum: ''\r\n      });\r\n    }\r\n    this.props.requestAllExpenses();\r\n  }\r\n\r\n  setSelectOption = selectedOption => {\r\n    this.setState({ selectedOption });\r\n  }\r\n\r\n  updateList = exType => {\r\n    return this.props.expenses.map(\r\n      exp => (exp.type === exType)\r\n        ? exp.storage.map(e => {\r\n          return <ItemOfListTransaction key={Math.random()} transaction={e} />\r\n        })\r\n        : []\r\n    )\r\n  }\r\n\r\n  chartValuesCounter = () => {\r\n    const initialSumsOfTypes = [\r\n      +this.types[0].amount,\r\n      +this.types[1].amount,\r\n      +this.types[2].amount,\r\n      +this.types[3].amount,\r\n      +this.types[4].amount\r\n    ];\r\n\r\n    const absoluteMaxNum = initialSumsOfTypes.reduce((a, b) => a + b);\r\n\r\n    const [first, second, third, fourth, fifth] = [\r\n      Math.round(initialSumsOfTypes[0] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[1] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[2] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[3] / absoluteMaxNum * 100),\r\n      Math.round(initialSumsOfTypes[4] / absoluteMaxNum * 100)\r\n    ];\r\n\r\n    const sumsOfTypesInPercents = [first, second, third, fourth, fifth];\r\n\r\n    return sumsOfTypesInPercents;\r\n  }\r\n\r\n  updateTypeAmount = exType => {\r\n    let arrOfTypeSums = [];\r\n    this.props.expenses.map(\r\n      exp => (exp.type === exType)\r\n        ? exp.storage.map(e => {\r\n          return arrOfTypeSums.push(+e.sum);\r\n        })\r\n        : []\r\n    )\r\n    this.types.map(tp => (tp.type === exType)\r\n      ? tp.amount = arrOfTypeSums.reduce(\r\n        (a, b) => +a + +b, 0)\r\n      : []\r\n    )\r\n    return arrOfTypeSums.reduce((a, b) => a + b, 0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"expenses_block\">\r\n        <div className=\"label-exp-block\">Expenses\r\n        </div>\r\n        <div className=\"expenses_input\">\r\n          <input type=\"number\"\r\n            value={this.state.newExpenseSum}\r\n            placeholder=\"type expense sum$\"\r\n            className=\"expenses_sum_input form-control\"\r\n            onChange={(e) => this.onExpenseSumInput(e.target.value)}\r\n          />\r\n          <Select\r\n            className=\"type-select\"\r\n            options={this.options}\r\n            onChange={this.setSelectOption}\r\n            defaultValue={this.state.selectedOption}\r\n          />\r\n          <input type=\"text\"\r\n            className=\"expenses_commnet_input form-control\"\r\n            value={this.state.newExpenseComment}\r\n            placeholder=\"type comment\"\r\n            onChange={(e) => this.onExpenseCommentInput(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"add btn btn-secondary font-weight-bold\"\r\n            onClick={this.onAddingExpenseClick}\r\n          >add</button>\r\n        </div>\r\n\r\n        <Accordion className=\"accordion\" defaultActiveKey=\"0\">\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\"\r\n                className=\"type-btn text-secondary font-weight-bold\">\r\n                Food: &nbsp;\r\n                {this.updateTypeAmount('food')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"0\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('food')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\"\r\n                className=\"type-btn text-secondary font-weight-bold\">\r\n                Study: &nbsp;\r\n                {this.updateTypeAmount('study')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"1\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('study')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\"\r\n                className=\"type-btn text-secondary font-weight-bold\">\r\n                Fun: &nbsp;\r\n                {this.updateTypeAmount('fun')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"2\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('fun')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\"\r\n                className=\"type-btn text-secondary font-weight-bold\">\r\n                Medicine: &nbsp;\r\n                {this.updateTypeAmount('medicine')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"3\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('medicine')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\"\r\n                className=\"type-btn text-secondary font-weight-bold\">\r\n                Daily: &nbsp;\r\n                {this.updateTypeAmount('daily')}\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse className=\"card-collapse\" eventKey=\"4\">\r\n              <Card.Body className=\"card-body\">\r\n                {this.updateList('daily')}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n\r\n        <Chart types={this.options} sumsOfTypesInPercents={this.chartValuesCounter()} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","const moment = require('moment');\n\nexport default class IncomesService {\n    static apiPath = '/api/v1/incomes'\n\n    static findAllIncomes() {\n        return fetch(IncomesService.apiPath)\n            .then(response => response.json())\n            .catch(error => {\n                console.log('error', error);\n                return [];\n            })\n    }\n\n    static createIncome(sum, comment) {\n        return fetch(`${IncomesService.apiPath}`, {\n            method: 'POST',\n            body: JSON.stringify({\n              sum,\n              comment,\n              date: moment().format('MMMM Do YYYY')\n            }),\n            headers: {\"Content-Type\": \"application/json\"}\n          });\n    }\n}","import React, { Component } from 'react';\r\nimport IncomesService from '../../service/IncomesService';\r\nimport ItemOfListTransaction from './ItemOfListTransaction';\r\nimport './main.scss';\r\n\r\nexport default class Incomes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newIncomeComment: '',\r\n      newIncomeSum: '',\r\n      filterValue: ''\r\n    }\r\n    this.onAddingIncomeClick = this.onAddingIncomeClick.bind(this);\r\n  }\r\n\r\n  onIncomeCommentInput = value => {\r\n    this.setState({ newIncomeComment: value })\r\n  }\r\n\r\n  onIncomeSumInput = value => {\r\n    this.setState({ newIncomeSum: value })\r\n  }\r\n\r\n  onAddingIncomeClick = () => {\r\n    if (!this.state.newIncomeSum.length) {\r\n      console.error('Input with sum must be a number and cannot be empty!');\r\n      alert('Enter correct value of sum. It must be a number and cannot be empty');\r\n    } else {\r\n      IncomesService\r\n        .createIncome(\r\n          this.state.newIncomeSum,\r\n          this.state.newIncomeComment\r\n        ).then(this.requestAllIncomes);\r\n      this.setState({\r\n        newIncomeComment: '',\r\n        newIncomeSum: '',\r\n        incomes: this.props.incomes\r\n      })\r\n    }\r\n    this.props.requestAllIncomes();\r\n  }\r\n\r\n  updateList = () => {\r\n    if (!this.state.filterValue.length) {\r\n      return this.props.incomes.map(inc => {\r\n        return <ItemOfListTransaction key={Math.random()} transaction={inc} />\r\n      })\r\n    } else {\r\n      let newIncomes = this.props.incomes;\r\n      newIncomes = newIncomes.filter(inc => {\r\n        return inc.comment.toLowerCase().search(this.state.filterValue.toLowerCase()) !== -1;\r\n      });\r\n      return newIncomes.map(inc => {\r\n        return <ItemOfListTransaction key={Math.random()} transaction={inc} />\r\n      })\r\n    }\r\n  }\r\n\r\n  setFilterValue = value => {\r\n    this.setState({ filterValue: value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"income_block\">\r\n        <div className=\"label-inc-block\">Incomes</div>\r\n        <div className=\"income_input\">\r\n          <input type=\"number\"\r\n            className=\"income_sum_input form-control\"\r\n            value={this.state.newIncomeSum}\r\n            placeholder=\"type income sum$\"\r\n            onChange={(e) => this.onIncomeSumInput(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"add btn-add-income btn btn-secondary font-weight-bold\"\r\n            onClick={this.onAddingIncomeClick}>\r\n            add</button>\r\n          <input type=\"text\"\r\n            className=\"income_comment form-control\"\r\n            value={this.state.newIncomeComment}\r\n            placeholder=\"type comment\"\r\n            onChange={(e) => this.onIncomeCommentInput(e.target.value)}\r\n          />\r\n          <input type=\"text\"\r\n            onChange={e => this.setFilterValue(e.target.value)}\r\n            title=\"filter by commentary\"\r\n            className=\"income_filter form-control\" placeholder=\"filter...\" />\r\n        </div>\r\n\r\n        <div className=\"income_list\">\r\n          {this.updateList()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import './App.css';\nimport React from 'react';\n// import WalletContainer from '../../containers/WalletContainer';\n// import { Provider } from 'react-redux';\n// import { store } from '../../store/rootReducer';\nimport Header from '../header/Header';\nimport Footer from '../footer/Footer';\nimport Main from '../main/Main';\nimport ExpensesService from '../../service/ExpensesService';\nimport IncomesService from '../../service/IncomesService';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      incomes: [],\n      expenses: [],\n      expensesTotalSum: 0,\n      incomesTotalSum: 0\n    }\n  }\n\n  requestAllExpenses = () => {\n    ExpensesService\n      .findAllExpenses()\n      .then((expensesData => {\n        this.setState({\n          expenses: expensesData.expenses,\n          expensesTotalSum: expensesData.expensesSum\n        });\n      }));\n  }\n\n  requestAllIncomes = () => {\n    IncomesService\n      .findAllIncomes()\n      .then((incomesData => {\n        this.setState({\n          incomes: incomesData.incomes,\n          incomesTotalSum: incomesData.incomesSum\n        });\n      }));\n  }\n\n  componentDidMount() {\n    this.requestAllIncomes();\n    this.requestAllExpenses();\n  }\n\n  render() {\n    return (\n      // <Provider store={store}>\n      <div className=\"App bg-light h-100 container\">\n        <Header />\n        {/* <WalletContainer state={store.getState()} /> */}\n        <Main\n          requestAllIncomes={this.requestAllIncomes}\n          requestAllExpenses={this.requestAllExpenses}\n          state={this.state} />\n        <Footer />\n      </div>\n      // </Provider>\n    );\n  }\n}","import React, { Component } from 'react';\r\nimport './main.scss';\r\nimport TotalInfo from './TotalInfo';\r\nimport Expenses from './Expenses';\r\nimport Income from './Income';\r\n\r\nexport default class Main extends Component {\r\n  render() {\r\n    return (\r\n      <main className=\"main\">\r\n        <TotalInfo\r\n          expensesTotalSum={this.props.state.expensesTotalSum}\r\n          incomesTotalSum={this.props.state.incomesTotalSum}\r\n        // incomesTotalSum={this.props.incomesTotalSum}\r\n        // expensesTotalSum={this.props.expensesTotalSum}\r\n        />\r\n        <Expenses\r\n          requestAllExpenses={this.props.requestAllExpenses}\r\n          expenses={this.props.state.expenses}\r\n        // expenses={this.props.expenses}\r\n        // setNewExpense={this.props.setNewExpense}\r\n        />\r\n        <Income\r\n          requestAllIncomes={this.props.requestAllIncomes}\r\n          incomes={this.props.state.incomes}\r\n        // incomes={this.props.incomes}\r\n        // setNewIncome={this.props.setNewIncome}\r\n        />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}